using System;
using System.Globalization;
using System.Collections.Generic;
using ConsoleApp1;

public class BaseDataModelComparer : IEqualityComparer<BaseDataModel>
{
    public bool AreEquivalent(BaseDataModel a, BaseDataModel b)
    {
        if (a == null || b == null)
            return false;

        // Compare MetricValueGBP and TriggerValueGBP with threshold of 1
        bool metricClose = Math.Abs(a.MetricValueGBP - b.MetricValueGBP) <= 1;
        bool triggerClose = Math.Abs(a.TriggerValueGBP - b.TriggerValueGBP) <= 1;

        // Parse Utilisation to double, handling both "33%" and "32.5567" formats
        double utilA = ParseUtilisation(a.Utilisation);
        double utilB = ParseUtilisation(b.Utilisation);

        bool utilisationClose = Math.Abs(Math.Round(utilA) - Math.Round(utilB)) == 0;

        return metricClose && triggerClose && utilisationClose;
    }

    public bool Equals(BaseDataModel x, BaseDataModel y)
    {
        return AreEquivalent(x, y);
    }

    public int GetHashCode(BaseDataModel obj)
    {
        if (obj == null) return 0;

        // Use rounded/thresholded values for hash code to match comparison logic
        int metricHash = Math.Round(obj.MetricValueGBP).GetHashCode();
        int triggerHash = Math.Round(obj.TriggerValueGBP).GetHashCode();
        int utilisationHash = Math.Round(ParseUtilisation(obj.Utilisation)).GetHashCode();

        // Combine hashes
        int hash = 17;
        hash = hash * 23 + metricHash;
        hash = hash * 23 + triggerHash;
        hash = hash * 23 + utilisationHash;
        return hash;
    }

    private double ParseUtilisation(string utilisation)
    {
        if (string.IsNullOrWhiteSpace(utilisation))
            return 0;

        utilisation = utilisation.Trim();
        if (utilisation.EndsWith("%"))
        {
            if (double.TryParse(utilisation.TrimEnd('%'), NumberStyles.Any, CultureInfo.InvariantCulture, out double percent))
                return percent;
        }
        else
        {
            if (double.TryParse(utilisation, NumberStyles.Any, CultureInfo.InvariantCulture, out double value))
                return value;
        }
        return 0;
    }
}
