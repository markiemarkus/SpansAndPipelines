using System.Globalization;
using ConsoleApp1;

public class BaseDataModelComparer : IEqualityComparer<BaseDataModel>
{
    public bool AreEquivalent(BaseDataModel a, BaseDataModel b)
    {
        if (a == null || b == null)
            return false;

        // Compare all required properties
        bool busDateEqual = a.BusDate.Date == b.BusDate.Date;
        bool nodeNameEqual = string.Equals(a.NodeName, b.NodeName, StringComparison.Ordinal);
        bool riskMetricEqual = string.Equals(a.RiskMetric, b.RiskMetric, StringComparison.Ordinal);
        bool triggerNameEqual = string.Equals(a.TriggerName, b.TriggerName, StringComparison.Ordinal);
        bool triggerTypeEqual = string.Equals(a.TriggerType, b.TriggerType, StringComparison.Ordinal);

        bool metricClose = Math.Abs(a.MetricValueGBP - b.MetricValueGBP) <= 1;
        bool triggerClose = Math.Abs(a.TriggerValueGBP - b.TriggerValueGBP) <= 1;

        double utilA = ParseUtilisation(a.Utilisation);
        double utilB = ParseUtilisation(b.Utilisation);
        bool utilisationClose = Math.Abs(Math.Round(utilA) - Math.Round(utilB)) == 0;

        return busDateEqual
            && nodeNameEqual
            && riskMetricEqual
            && triggerNameEqual
            && triggerTypeEqual
            && metricClose
            && triggerClose
            && utilisationClose;
    }

    public bool Equals(BaseDataModel x, BaseDataModel y)
    {
        return AreEquivalent(x, y);
    }

    public int GetHashCode(BaseDataModel obj)
    {
        if (obj == null) return 0;

        int hash = 17;
        hash = hash * 23 + obj.BusDate.Date.GetHashCode();
        hash = hash * 23 + (obj.NodeName?.GetHashCode() ?? 0);
        hash = hash * 23 + (obj.RiskMetric?.GetHashCode() ?? 0);
        hash = hash * 23 + (obj.TriggerName?.GetHashCode() ?? 0);
        hash = hash * 23 + (obj.TriggerType?.GetHashCode() ?? 0);
        hash = hash * 23 + Math.Round(obj.MetricValueGBP).GetHashCode();
        hash = hash * 23 + Math.Round(obj.TriggerValueGBP).GetHashCode();
        hash = hash * 23 + Math.Round(ParseUtilisation(obj.Utilisation)).GetHashCode();
        return hash;
    }

    private double ParseUtilisation(string utilisation)
    {
        if (string.IsNullOrWhiteSpace(utilisation))
            return 0;

        utilisation = utilisation.Trim();
        if (utilisation.EndsWith("%"))
        {
            if (double.TryParse(utilisation.TrimEnd('%'), NumberStyles.Any, CultureInfo.InvariantCulture, out double percent))
                return percent;
        }
        else
        {
            if (double.TryParse(utilisation, NumberStyles.Any, CultureInfo.InvariantCulture, out double value))
                return value;
        }
        return 0;
    }
}
